What happens when you initialize a repository? Why do you need to do it?

Whe you initailaize a repository a hidden folder .git is made. This folder is
changes are tracked. If you do not initialize a repositiory then changes in a
directory will not be tracked.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is different from the working directory and the repository
because it is just a basket to put the file you want commited in. I can imagine
this being particularly useful if you were debugging and you want to recommit
just one old file to fix a bug


How can you use the staging area to make sure you have one commit per logical
change?
to make sure you have one logical change per commit you can use the command git
diff --staged to check what changes will be in the commit. If there are changes
to more than one file that don't logically go together, you add just the logical
related files to the staging area, check git diff -- staged again

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
branches are helpful in keeping your history organized if you are trying an
experimental change. or adding a new feature  without changing the working version.
branches allow you to track these changes in a the same way and afford all the
benifits of debugging without affecting the master branch.

How do the diagrams help you visualize the branch structure?
diagrams help you visualize which commits are avalable as parents in a particulr
branch.
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
